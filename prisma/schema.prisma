// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth.js User Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Hashed password for credentials login
  role          UserRole  @default(USER)
  tenantId      String?
  isActive      Boolean   @default(true)
  lastLoginAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  tenant        Tenant?   @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  dashboards    Dashboard[]
  auditLogs     AuditLog[]

  @@index([email])
  @@index([tenantId])
  @@index([role])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Tenant Management Models
model Tenant {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  domain      String?  @unique
  logo        String?
  settings    Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  invitations TenantInvitation[]

  @@index([slug])
  @@index([domain])
}

model TenantInvitation {
  id        String             @id @default(cuid())
  tenantId  String
  email     String
  role      UserRole           @default(USER)
  token     String             @unique
  status    InvitationStatus   @default(PENDING)
  expiresAt DateTime
  createdAt DateTime           @default(now())

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([tenantId])
}

// Audit Log Model
model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}

// Subscription Models
model Subscription {
  id           String             @id @default(cuid())
  userId       String
  planType     SubscriptionPlan   @default(STARTER)
  status       SubscriptionStatus @default(TRIAL)
  startDate    DateTime           @default(now())
  endDate      DateTime?
  billingCycle BillingCycle       @default(MONTHLY)
  stripeId     String?            @unique
  priceId      String?
  cancelAtEnd  Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([userId])
  @@index([status])
}

model Payment {
  id             String        @id @default(cuid())
  subscriptionId String
  amount         Float
  currency       String        @default("usd")
  status         PaymentStatus @default(PENDING)
  stripeId       String        @unique
  invoiceId      String?
  description    String?
  createdAt      DateTime      @default(now())

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([status])
}

// Dashboard Models
model Dashboard {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  layout      Json      // Stores grid layout configuration
  settings    Json      // Dashboard-level settings
  isDefault   Boolean   @default(false)
  isPublic    Boolean   @default(false)
  shareToken  String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  widgets Widget[]

  @@index([userId])
  @@index([shareToken])
}

model Widget {
  id            String     @id @default(cuid())
  dashboardId   String
  type          WidgetType
  title         String
  configuration Json       // Widget-specific configuration
  position      Json       // Position in dashboard grid
  size          Json       // Width and height
  dataSource    Json       // GA metrics and dimensions
  refreshRate   Int        @default(300) // Seconds
  isVisible     Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  dashboard Dashboard @relation(fields: [dashboardId], references: [id], onDelete: Cascade)

  @@index([dashboardId])
  @@index([type])
}

// Enums
enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  CANCELLED
  EXPIRED
  PAST_DUE
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum WidgetType {
  LINE_CHART
  BAR_CHART
  PIE_CHART
  KPI_CARD
  DATA_TABLE
  GEO_MAP
  REALTIME_COUNTER
  FUNNEL_CHART
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  TENANT_OWNER
  USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}